openapi: 3.0.1
info:
  title: Car Shop
  description: É uma API REST criada para simular uma loja de veículos, onde há a possibilidade de registrar, editar, visualizar e excluir os dados relacionados aos veículos. Foi desenvolvida a partir do paradigma da OOP e nesta API há somente duas entidade, Motos (Motorcycles) e Carros (Cars), para processamento do CRUD. Toda base de dados fica no banco NoSQL MongoDB, onde a comunicação é feita através do ODM Mongoose.js,
  version: 1.0.0
  contact: 
    name: Adelson
    url: https://www.linkedin.com/in/adelson-lima/
servers:
  - url: http://localhost:3001/v1/
    description: A porta depende do valor da variável NOME_DA_VARIÁVEL
paths:
  /cars:
    post:
      tags:
        - Cars
      summary: Criará um registro
      description: Vai criar um registro dos dados do carro informado.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/example_body_car'
      responses:  
        201:
          description: Um JSON com os dados utilizados para registro será retornado junto a um ID.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/response_car'
        400:
          description: Um JSON com uma mensagem de erro será retornada caso um dos campos obrigatórios não seja informado.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
              example:
                message: 'doorsQty: Required'
    get:
      tags:
        - Cars
      summary: Retornará todos os dados
      description: Irá retornar todos os dados relacionados aos carros registrados.
      responses:
        200:
          description: Retorna todos os dados relacionados á todos os carros registrados no banco. Retornará um objeto vazio, caso não haja dados registrados.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/response_car'
  /cars/{id}:
    get:
      tags:
        - Cars
      parameters:
        - name: id
          in: path
          description: Buscar produto pelo ID
          required: true
      summary: Retornará dados específicos
      description: Ao pesquisar pelo ID, retornará todos os dados relacionados ao carro específico.
      responses:
        200:
          description: Retorna os dados relacionados ao carro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_car'
        400:
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'           
    put:
      tags:
        - Cars
      parameters:
        - name: id
          in: path
          description: Por favor, informe o ID do registro.
          required: true
      summary: Atualizará os registros
      description: Informando o ID, uma verificação será realizada para validar a sintaxe e a existência do seu registro. Em resultado positivo, irá atualizar os dados relacionados ao carro e retornará esses dados junto ao ID.
      requestBody:
        required: true
        description: Aqui no Swagger, as informações retornadas um pouco diferentes das retornadas por um Client API, como Postman, por exemplo. 
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/example_body_car'
      responses:
        200:
          description: Atualiza e retorna os dados relacionados ao carro.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response_car'
        400: 
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'
    delete:
      tags:
      - Cars
      parameters:
        - name: id
          in: path
          description: Por favor, informe o ID do registro.
          required: true
      summary: Apagará os registros
      description: Uma verificação da existência dos dados será feita através do ID. Em resultado positivo, não irá retornar nenhum conteúdo e deletará os dados relacionados ao carro. Caso contrário, erros variados serão retornados.
      responses:
        204:
          description: Apagará todos os dados relacionados ao ID informado. Não há nenhum conteúdo de retorno.
        400: 
          $ref: '#/components/responses/400'
        404:
          $ref: '#/components/responses/404'

components:
  schemas:
    error:
      type: object
      required:
        - message
      properties:
        message:
          type: string

    mongo_id: 
      type: object
      properties:
        _id:
          type: string
      required:
        - _id

    vehicle:
      type: object
      properties:
        model:
          type: string
        year:
          type: number
        color:
          type: string
        status:
          type: boolean
        buyValue:
          type: number
      required:
        - model
        - year
        - color
        - status
        - buyValue
  
    car:
      type: object
      allOf:
        - $ref: '#/components/schemas/vehicle'
        - properties:
            doorsQty: 
              type: number
            seatsQty: 
              type: number
        - required:
            - doorsQty
            - seatsQty

    motorcycle:
      type: object
      allOf:
        - $ref: '#/components/schemas/vehicle'
        - properties:
            category:
              type:
                enum:
                  - Street
                  - Custom
                  - Trail
            engineCapacity:
              type: number
        - required:
            - category
            - engineCapacity

    example_body_car:
      type: object
      allOf:
        - $ref: '#/components/schemas/car'
      example:
        model: GLC 43 AMG
        year: 2022
        status: true
        color: black
        buyValue: 464930.00
        doorsQty: 4
        seatsQty: 5

    example_body_motorcycle:
      type: object
      allOf:
        - $ref: '#/components/schemas/motorcycle'
      example:
        model: Ducati Diavel 1260
        year: 2020
        status: true
        color: red
        buyValue: 100110
        category: Street
        engineCapacity: 77.01
    
    response_car:
      type: object
      allOf:
        - $ref: '#/components/schemas/mongo_id'
        - $ref: '#/components/schemas/example_body_car'
      example:
        _id: 6461366e2e015611bfd71f4c
        model: GLC 43 AMG
        year: 2022
        status: true
        color: black
        buyValue: 464930.00
        doorsQty: 4
        seatsQty: 5
    
    response_motorcycle:
      type: object
      allOf:
        - $ref: '#/components/schemas/mongo_id'
        - $ref: '#/components/schemas/example_body_motorcycle'
      example:
        _id: 6461366e2e015611bfd71f4c
        model: Ducati Diavel 1260
        year: 2020
        status: true
        color: red
        buyValue: 100110
        category: Street
        engineCapacity: 77.01

    error_object_not_found:
      type: object
      schema:
        $ref: '#/components/schemas/error'
      example:
        message: 'error: Object not found'
    
    error_amount_characters:
      type: object
      schema:
        $ref: '#/components/schemas/error'
      example:
        message: 'error: Id must have 24 hexadecimal characters'
  
  responses:
    '400':
      description: Um erro é retornando quando o ID de busca possui mais ou menos do que 24 caracteres.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_amount_characters'
    '404':
      description: Um erro é retornando quando nenhum ID for encontrado.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/error_object_not_found'
       